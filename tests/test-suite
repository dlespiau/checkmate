#!/bin/sh

#set -x

default_path=".."
default_cmd="checkmate"
tests_list=`find . -name '*.test' | sed -e 's#^\./\(.*\)#\1#' | sort`
prog_name=`basename $0`

if [ ! -x "$default_path/sparse-llvm" ]; then
	disabled_cmds="sparsec sparsei sparse-llvm"
fi

# counts:
#	- tests that have not been converted to test-suite format
#	- tests that are disabled
#	- tests that passed
#	- tests that failed
#	- tests that failed but are known to fail
unhandled_tests=0
disabled_tests=0
ok_tests=0
ko_tests=0
known_ko_tests=0

# defaults to not verbose
[ -z "$V" ] && V=0

##
# get_value(key, file) - gets the value of a (key, value) pair in file.
#
# returns 0 on success, 1 if the file does not have the key
get_value()
{
	last_result=`grep $1: $2 | sed -e "s/^.*$1:\(.*\)$/\1/"`
	[ -z "$last_result" ] && return 1
	return 0
}

##
# get_tag(key, file) - does file has the tag key in it ?
#
# returns 0 if present, 1 otherwise
get_tag()
{
	last_result=`grep $1 $2`
	return $?
}

##
# verbose(string) - prints string if we are in verbose mode
verbose()
{
	[ "$V" -eq "1" ] && echo "        $1"
	return 0
}

##
# error(string[, die]) - prints an error and exits with value die if given
error()
{
	echo "error: $1"
	[ -n "$2" ] && exit $2
	return 0
}

do_usage()
{
echo "$prog_name - a tiny automatic testing script"
echo "Usage: $prog_name [command] [command arguments]"
echo
echo "commands:"
echo "    none                       runs the whole test suite"
echo "    single file                runs the test in 'file'"
echo "    format file [name [cmd]]   helps writing a new test case using cmd"
echo "    reformat file              runs the test and ammend its output"
echo "    reformat-all               runs reformat on all tests"
echo
echo "    help                       prints usage"
}

test_get_name()
{
	_test_name="Unknown"

	get_value "check-name" $file
	if [ "$?" -eq 1 ]; then
		echo "warning: test '$file' unhandled"
		unhandled_tests=`expr $unhandled_tests + 1`
		return 2
	else
		_test_name=$last_result
	fi

	last_result=`echo $_test_name |  sed -e 's/^ *//'`
	return 0
}

test_get_command()
{
	_file="$1"

	_cmd=`eval echo $default_path/$default_cmd`
	get_value "check-command" $_file
	if [ "$?" -eq "0" ]; then
		_result=`echo $last_result | sed -e 's/^ *//'`
		_cmd=`eval echo $_result`
	fi

	last_result=$_cmd
	return 0
}

test_extract_scripts()
{
	_file="$1"

	# pre and post scripts
	sed -n '/check-pre-script-start/,/check-pre-script-end/p' $_file \
		2> /dev/null \
		| grep -v check-pre-script > "$_file".pre.sh
	sed -n '/check-post-script-start/,/check-post-script-end/p' $_file \
		2> /dev/null \
		| grep -v check-post-script > "$_file".post.sh

}

test_run_pre_script()
{
	_file="$1"

	sh "$_file".pre.sh
	if [ "$?" -ne "0" ]; then
		error "pre-script failed"
		return 1
	fi
}

test_run_post_script()
{
	_file="$1"

	sh "$_file".post.sh
	if [ "$?" -ne "0" ]; then
		error "post-script failed"
		return 1
	fi
}

test_cleanup()
{
	_file="$1"

	# on sucess, remove all the files that have been generated
	rm -f $_file.error.diff $_file.error.expected $_file.error.got \
	      $_file.output.diff $_file.output.expected $_file.output.got \
	      $_file.pre.sh $_file.post.sh
}

##
# do_test(file) - tries to validate a test case
#
# it "parses" file, looking for check-* tags and tries to validate
# the test against an expected result
# returns:
#	- 0 if the test passed,
#	- 1 if it failed,
#	- 2 if it is not a "test-suite" test.
#	- 3 if the test is disabled.
do_test()
{
	test_failed=0
	file="$1"

	# can this test be handled by test-suite ?
	# (it has to have a check-name key in it)
	test_get_name $file
	test_name=$last_result

	# does the test provide a specific command ?
	test_get_command $file
	cmd=$default_path/$last_result

	# check for disabled commands
	set -- $cmd
	base_cmd=`basename $1`
	for i in $disabled_cmds; do
		if [ "$i" = "$base_cmd" ] ; then
			disabled_tests=`expr $disabled_tests + 1`
			echo "     DISABLE $test_name ($file)"
			return 3
		fi
	done

	echo "     TEST    $test_name ($file)"

	verbose "Using command       : $cmd"

	# grab the expected output
	sed -n '/check-output-start/,/check-output-end/p' $file \
		| grep -v check-output > "$file".output.expected
	sed -n '/check-error-start/,/check-error-end/p' $file \
		| grep -v check-error > "$file".error.expected

	test_extract_scripts $file

	# grab the expected exit value
	get_value "check-exit-value" $file
	if [ "$?" -eq "0" ]; then
		expected_exit_value=`echo $last_result | tr -d ' '`
	else
		expected_exit_value=0
	fi
	verbose "Expecting exit value: $expected_exit_value"

	test_run_pre_script $file

	# grab the actual output & exit value
	$cmd 1> $file.output.got 2> $file.error.got
	actual_exit_value=$?

	test_run_post_script $file

	for stream in error output; do
		diff -u "$file".$stream.expected "$file".$stream.got > "$file".$stream.diff
		if [ "$?" -ne "0" ]; then
			error "actual $stream text does not match expected $stream text."
			error  "see $file.$stream.* for further investigation."
			cat "$file".$stream.diff
			return 1
		fi
	done

	if [ "$actual_exit_value" -ne "$expected_exit_value" ]; then
		error "Actual exit value does not match the expected one."
		error "expected $expected_exit_value, got $actual_exit_value."
		return 1
	fi

	test_cleanup $file

	return 0
}

do_test_suite()
{
	for i in $tests_list; do
		do_test "$i"
		ret=$?

		if [ "$ret" -eq "1" ]; then
			ko_tests=`expr $ko_tests + 1`
			get_tag "check-known-to-fail" $file
			if [ "$?" -eq "0" ]; then
				echo "info: test '$file' is known to fail"
				known_ko_tests=`expr $known_ko_tests + 1`
			fi
		elif [ "$ret" -eq "0" ]; then
			ok_tests=`expr $ok_tests + 1`
		fi
	done

	# prints some numbers
	tests_nr=`expr $ok_tests + $ko_tests`
	echo "Out of $tests_nr tests, $ok_tests passed, $ko_tests failed"
	if [ "$unhandled_tests" -ne "0" ]; then
		echo "$unhandled_tests tests could not be handled by $prog_name"
	fi
	if [ "$disabled_tests" -ne "0" ]; then
		echo "$disabled_tests tests were disabled"
	fi

	if [ "$ko_tests" -ne "0" ]; then
		return 1
	fi
	return 0
}

do_format_internal()
{
	file="$1"
	if [ -z "$2" ]; then
		test_get_name $file
		fname=$last_result
		test_get_command $file
		fcmd=$last_result
	elif [ -z "$3" ]; then
		fname="$2"
		test_get_command $fname
		fcmd=$last_result
	else
		fname="$2"
		fcmd="$3"
	fi

	test_extract_scripts $file

	test_run_pre_script $file > /dev/null

	cmd=`eval echo $default_path/$fcmd`
	$cmd 1> $file.output.got 2> $file.error.got
	fexit_value=$?

	test_run_post_script $file > /dev/null

	cat <<_EOF
/*
 * check-name: $fname
_EOF
	if [ "$fcmd" != "$default_cmd" ]; then
		echo " * check-command: $fcmd"
	fi
	if [ "$fexit_value" -ne "0" ]; then
		echo " * check-exit-value: $fexit_value"
	fi

	if [ -s "$file.pre.sh" ]; then
			echo " *"
			echo " * check-pre-script-start"
			cat "$file.pre.sh"
			echo " * check-pre-script-end"
	fi

	for stream in output error; do
		if [ -s "$file.$stream.got" ]; then
			echo " *"
			echo " * check-$stream-start"
			cat "$file.$stream.got"
			echo " * check-$stream-end"
		fi
	done

	if [ -s "$file.post" ]; then
			echo " *"
			echo " * check-post-script-start"
			cat "$file.post.sh"
			echo " * check-post-script-end"
	fi

	echo " */"

	test_cleanup $file

	return 0
}

##
# do_format(file[, name[, cmd]]) - helps a test writer to format test-suite tags
do_format()
{
	file=$1

	# we create the test file if it doesn't exist, to stdio otherwise
	if [ -e "$file" ]; then
		do_format_internal "$1" "$2" "$3"
	else
		do_format_internal "$1" "$2" "$3" > $file
	fi
}

do_reformat()
{
	file=$1

	do_format $file > $file.reformat
	mv $file.reformat $file
}

do_reformat_all()
{
	for i in $tests_list; do
		do_reformat "$i"
	done
}

##
# arg_file(filename) - checks if filename exists
arg_file()
{
	[ -z "$1" ] && {
		do_usage
		exit 1
	}

	[ -n "$2" ] && return 0

	[ -e "$1" ] || {
		error "Can't open file $1"
		exit 1
	}
	return 0
}

ret=0
case "$1" in
	'')
		do_test_suite
		ret=$?
		;;
	single)
		arg_file "$2"
		do_test "$2"
		case "$?" in
			0) echo "$2 passed!";;
			1) echo "$2 failed!"; ret=1;;
			2) echo "$2 can't be handled by $prog_name"; ret=1;;
			3) echo "$2 is disabled";;
		esac
		;;
	format)
		arg_file "$2" 1
		do_format "$2" "$3" "$4"
		ret=$?
		;;
	reformat)
		arg_file "$2"
		do_reformat "$2"
		ret=$?
		;;
	reformat-all)
		do_reformat_all "$2"
		ret=$?
		;;
	help | *)
		do_usage
		exit 1
		;;
esac

exit $ret

